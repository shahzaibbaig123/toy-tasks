// Example program
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;
#include <chrono>
#include <stdio.h>
#include <time.h>


#include <iostream>
#include <fstream>
#include <unistd.h>

void process_mem_usage(double& vm_usage, double& resident_set)
{
    vm_usage     = 0.0;
    resident_set = 0.0;

    // the two fields we want
    unsigned long vsize;
    long rss;
    {
        std::string ignore;
        std::ifstream ifs("/proc/self/stat", std::ios_base::in);
        ifs >> ignore >> ignore >> ignore >> ignore >> ignore >> ignore >> ignore >> ignore >> ignore >> ignore
                >> ignore >> ignore >> ignore >> ignore >> ignore >> ignore >> ignore >> ignore >> ignore >> ignore
                >> ignore >> ignore >> vsize >> rss;
    }

    long page_size_kb = sysconf(_SC_PAGE_SIZE) / 1024; // in case x86-64 is configured to use 2MB pages
    vm_usage = vsize / 1024.0;
    resident_set = rss * page_size_kb;
}

// A comparator function used by qsort
int compare(const void *a, const void *b)
{
    return (*(int *)a - *(int *)b);
}

int main()
{

    clock_t begin, end;
    double time_spent;

    int arr2[] = {};

    int n = sizeof(arr2) / sizeof(arr2[0]);


    time_spent = 0.0;
    begin = clock();
    qsort(arr2, 1000, sizeof(int), compare); 
    end = clock();

    double vm, rss;
   process_mem_usage(vm, rss);
   cout << "VM: " << vm << "; RSS: " << rss << endl;

    // calculate time taken by C++ sort
    time_spent = (double)(end - begin) / CLOCKS_PER_SEC;

    cout << "Time taken by C++ qsort() - "
         << time_spent << endl;

    //   auto end = std::chrono::steady_clock::now();
    //   std::chrono::duration<double> elapsed_seconds = end-start;
    //   std::cout << "elapsed time: " << elapsed_seconds.count() << "s\n";

    //   cout << "\nArray after sorting using "
    //             "default sort is : \n";
    //   for (int i = 0; i < n; ++i)
    //     cout << arr[i] << " ";

    return 0;
}
